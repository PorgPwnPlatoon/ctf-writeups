from z3 import *

X = [ BitVec('x%s' % i, 8) for i in range(128) ]

s = Solver()
#s.add(X[21] * X[58] == 0x14)
s.add(X[32] - X[36] == 0xfa)
s.add(X[37] - X[26] == 0xd6)
s.add(X[16] - X[48] == 0x08)
s.add(X[55] - X[8]  == 0xd5)
#s.add(X[26] * X[7]  == 0xed)
#s.add(X[4]  * X[24] == 0xc8)
s.add(X[34] ^ X[28] == 0x55)
s.add(X[30] - X[55] == 0x34)
s.add(X[59] + X[50] == 0x8f)
s.add(X[44] + X[27] == 0xd6)
s.add(X[17] ^ X[14] == 0x31)
s.add(X[56] * X[20] == 0xac)
s.add(X[58] - X[26] == 0xc2)
s.add(X[26] ^ X[6]  == 0x2f)
s.add(X[14] ^ X[39] == 0x5a)
s.add(X[44] ^ X[39] == 0x40)
s.add(X[40] == X[26])
s.add(X[23] + X[49] == 0x98)
#s.add(X[23] * X[59] == 0x68)
s.add(X[1] - X[28] == 0xdb)
s.add(X[24] - X[29] == 0xd2)
s.add(X[38] - X[24] == 0x2e)
s.add(X[32] ^ X[22] == 0x1a)
#s.add(X[44] * X[4] == 0xa0)
#s.add(X[38] * X[27] == 0x5e)
s.add(X[15] - X[40] == 0xc8) 
s.add(X[49] ^ X[53] == 0x56)
s.add(X[26] ^ X[45] == 0x2b)
s.add(X[54] ^ X[9] == 0x19)
s.add(X[28] - X[47] == 0x1a)
s.add(X[50] + X[19] == 0xa1)
s.add(X[37] + X[57] == 0x56)
s.add(X[29] ^ X[18] == 0x38)
s.add(X[44] ^ X[60] == 9)
#s.add(X[15] * X[38] == 0x79)
s.add(X[37] ^ X[30] == 0x5d)
#s.add(X[2] * X[32] == 0x5c)
#s.add(X[10] * X[18] == 0x39)
s.add(X[29] == X[21])
#s.add(X[35] * X[21] == 0x2f)
#s.add(X[8] * X[37] == 0xab)
s.add(X[39] + X[26] == 0x93)
s.add(X[26] ^ X[34] == 0x73)
s.add(X[20] ^ X[31] == 0x40)
s.add(X[25] + X[16] == 0xa9)
s.add(X[39] ^ X[59] == 0x15)
s.add(X[0] + X[59] == ord('i'))
s.add(X[34] + X[46] == -0x5b)
s.add(X[30] ^ X[52] == 0x37)
s.add(X[0] * X[28] == ord('\b'))
s.add(X[34] - X[56] == -0x3b)
s.add(X[18] + X[60] == -0x1c)
s.add(X[35] ^ X[40] == 0x6e)
s.add(X[56] * X[16] == -0x54)
s.add(X[54] - X[47] == ord('\r'))
s.add(X[30] + X[55] == -100)
s.add(X[6] + X[33] == -0x2c)
s.add(X[7] * X[29] == -0x13)
s.add(X[56] ^ X[29] == 0x38)
s.add(X[1] * X[37] == ord('d'))
s.add(X[56] ^ X[58] == 0x46)
s.add(X[2] * X[19] == ord('&'))
s.add(X[26] ^ X[22] == 0x2b)
s.add(X[1] + X[7] == -0x79)
s.add(X[27] ^ X[0] == 0x2a)
s.add(X[21] - X[1] == ord('\v'))
s.add(X[27] + X[54] == -0x32)
s.add(X[17] ^ X[13] == 0x3b)
s.add(X[19] - X[58] == 0x12)
s.add(X[17] == X[10])
s.add(X[14] - X[58] == ord('M'))
s.add(X[42] * X[52] == ord('N'))
s.add(X[50] == X[32])
s.add(X[47] ^ X[51] == 0x38)
s.add(X[38] + X[25] == -0x6c)
s.add(X[41] + X[52] == -0x31)
s.add(X[44] == X[20])
s.add(X[12] + X[25] == ord('f'))
s.add(X[60] + X[36] == -0xf)
s.add(X[41] - X[21] == 0x11)
s.add(X[36] - X[49] == ord('D'))
s.add(X[9] - X[35] == ord('D'))
s.add(X[53] ^ X[51] == 1)
s.add(X[34] ^ X[57] == 0xd)
s.add(X[11] - X[28] == -0x15)
s.add(X[23] + X[24] == -0x67)
s.add(X[24] + X[13] == -0x6b)
s.add(X[12] - X[0] == -0x17)
s.add(X[34] + X[31] == ord('`'))
s.add(X[5] + X[53] == -0x6a)
s.add(X[49] * X[42] == ord('`'))
s.add(X[48] * X[21] == 0x14)
s.add(X[27] - X[52] == 0x03)
s.add(X[57] + X[20] == -0x6b)
s.add(X[10] * X[53] == -0x26)
s.add(X[1] + X[41] == -0x3c)
s.add(X[47] - X[1] == ord('\v'))
s.add(X[43] == X[19])
s.add(X[39] + X[47] == -0x6d)
s.add(X[12] * X[58] == ord('Q'))
s.add(X[8] * X[26] == ord('A'))
s.add(X[46] - X[31] == ord('E'))
s.add(X[7] + X[37] == ord('h'))
s.add(X[36] + X[4] == -0x44)
s.add(X[31] + X[32] == -0x5e)
s.add(X[25] + X[5] == ord('e'))
s.add(X[43] * X[29] == -0x13)
s.add(X[13] ^ X[45] == 0x10)
s.add(X[48] - X[12] == ord(';'))
s.add(X[23] - X[8] == ord('\t'))
s.add(X[7] ^ X[42] == 0x41)
s.add(X[5] - X[43] == -3)
s.add(X[60] ^ X[18] == 0x1a)
s.add(X[1] ^ X[3] == 0x2f)
s.add(X[17] - X[39] == ord('+'))
s.add(X[8] + X[20] == -0x2d)
s.add(X[11] * X[53] == -0x28)
s.add(X[27] + X[6] == -0x2e)
s.add(X[5] + X[3] == -0x55)
s.add(X[35] - X[47] == -0x2e)
s.add(X[16] ^ X[33] == 0x10)


print(s.check())
model = s.model()

res = ""
for i in range(0,128):
    obj = X[i]
    c = model[obj]
    try:
        c = c.as_long()
        print('x%i: %c' % (i, c))
        res = res + chr(c)
    except:
        pass
        res = res + "?"
print("Result: " + res);
